name: LaravelDevOps

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Cache Composer dependencies
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"

      - name: Copy files to Azure VM
        run: |
          rsync -avz --log-file=rsync.log --delete --exclude 'vendor' --exclude '.git' -e "ssh -o StrictHostKeyChecking=no" ./ asifalvi@${{ secrets.AZURE_VM_IP }}:/var/www/html/laravel-devops

      - name: Copy .env
        run: |
          ssh -o StrictHostKeyChecking=no asifalvi@${{ secrets.AZURE_VM_IP }} "if [ ! -f /var/www/html/laravel-devops/.env ]; then cp /var/www/html/laravel-devops/.env.example /var/www/html/laravel-devops/.env; fi"

      - name: Set directory permissions
        run: ssh -o StrictHostKeyChecking=no asifalvi@${{ secrets.AZURE_VM_IP }} "cd /var/www/html/laravel-devops && chmod -R 777 storage bootstrap/cache"

      - name: Generate key
        run: ssh -o StrictHostKeyChecking=no asifalvi@${{ secrets.AZURE_VM_IP }} "cd /var/www/html/laravel-devops && php artisan key:generate"

      # - name: Restart Apache
      #   run: ssh -o StrictHostKeyChecking=no asifalvi@${{ secrets.AZURE_VM_IP }} 'sudo systemctl restart apache2'

      # Optional: Create Database (if needed)
      # - name: Create Database
      #   run: |
      #     mkdir -p database
      #     touch database/database.sqlite

      # Optional: Execute tests (Unit and Feature tests) via PHPUnit/Pest (Uncomment if you need testing)
      # - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      #   env:
      #     DB_CONNECTION: sqlite
      #     DB_DATABASE: database/database.sqlite
      #   run: php artisan test
